<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_MR1K1_BEND" Id="{f3f12a20-b8bd-4f8a-96c6-66ebb9fb57e3}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_MR1K1_BEND
VAR
    {attribute 'TcLinkTo' := '.fbRunHOMS.bSTOEnable1:=TIIB[EL1004_M1K1_STO]^Channel 1^Input;
                              .fbRunHOMS.bSTOEnable2:=TIIB[EL1004_M1K1_STO]^Channel 2^Input;
                              .fbRunHOMS.stYupEnc.Count:=TIIB[EL5042_M1K1_Yupdwn]^FB Inputs Channel 1^Position;
                              .fbRunHOMS.stYdwnEnc.Count:=TIIB[EL5042_M1K1_Yupdwn]^FB Inputs Channel 2^Position;
                              .fbRunHOMS.stXupEnc.Count:=TIIB[EL5042_M1K1_Xupdwn]^FB Inputs Channel 1^Position;
                              .fbRunHOMS.stXdwnEnc.Count:=TIIB[EL5042_M1K1_Xupdwn]^FB Inputs Channel 2^Position;
                              .fbRunHOMS.fbDownYWatch.bVarToMonitor:=TIIB[EL7047_M1K1_Ydwn]^STM Control^Control^Reduce torque;
                              .fbRunHOMS.fbDownXWatch.bVarToMonitor:=TIIB[EL7047_M1K1_Xdwn]^STM Control^Control^Reduce torque;'}
    {attribute 'pytmc' := '
        pv: MR1K1:BEND
    '}
    M1K1 : DUT_HOMS;

    // Encoder Arrays/RMS Watch:
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:Y
    '}
    fbYRMSErrorM1K1 : FB_RMSWatch;
    fMaxYRMSErrorM1K1 : LREAL;
    fMinYRMSErrorM1K1 : LREAL;

    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:X
    '}
    fbXRMSErrorM1K1 : FB_RMSWatch;
    fMaxXRMSErrorM1K1 : LREAL;
    fMinXRMSErrorM1K1 : LREAL;

    // Pitch Control
    fbM1K1PitchControl : FB_PitchControl;
    bM1K1PitchDone : BOOL;
    bM1K1PitchBusy : BOOL;

    // 3-15-20 Having issues with pitch control on new Axilon systems (M1K2)
    // Should test on this one to see if common to all new systems
    // Using stepper only for now
    fbMotionStage_m16 : FB_MotionStage;

    // Raw Encoder Counts
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:YUP:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntYupM1K1 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:YDWN:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntYdwnM1K1 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:XUP:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntXupM1K1 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:XDWN:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntXdwnM1K1 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:PITCH:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntPitchM1K1 : UDINT;

    // Encoder Reference Values
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:YUP:REF
        field: EGU cnt
        io: i
    '}
    nEncRefYupM1K1 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:YDWN:REF
        field: EGU cnt
        io: i
    '}
    nEncRefYdwnM1K1 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:XUP:REF
        field: EGU cnt
        io: i
    '}
    nEncRefXupM1K1 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:XDWN:REF
        field: EGU cnt
        io: i
    '}
    nEncRefXdwnM1K1 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:ENC:PITCH:REF
        field: EGU cnt
        io: i
    '}
    nEncRefPitchM1K1 : UDINT;
    mcReadParameterPitchM1K1 : MC_ReadParameter;
    fEncRefPitchM1K1_urad : LREAL; // Current Pitch encoder offset in urad

    // Common
    fEncLeverArm_mm : LREAL := 410.0;

    // Mirror LEDs
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:LED:01:PWR
        io: io
        field: ZNAM OFF
        field: ONAM ON
    '}
    {attribute 'TcLinkTo' := 'TIIB[EL2024-0010_M1K1_BEND_LED1]^Channel 1^Output'}
    bLEDPower01 AT %Q*: BOOL;

    {attribute 'pytmc' := '
        pv: MR1K1:BEND:LED:02:PWR
        io: io
        field: ZNAM OFF
        field: ONAM ON
    '}
    {attribute 'TcLinkTo' := 'TIIB[EL2024-0010_M1K1_BEND_LED1]^Channel 2^Output'}
    bLEDPower02 AT %Q*: BOOL;

    {attribute 'pytmc' := '
        pv: MR1K1:BEND:LED:03:PWR
        io: io
        field: ZNAM OFF
        field: ONAM ON
    '}
    {attribute 'TcLinkTo' := 'TIIB[EL2024-0010_M1K1_BEND_LED1]^Channel 3^Output'}
    bLEDPower03 AT %Q*: BOOL;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:LED:04:PWR
        io: io
        field: ZNAM OFF
        field: ONAM ON
    '}
    {attribute 'TcLinkTo' := 'TIIB[EL2024-0010_M1K1_BEND_LED1]^Channel 4^Output'}
    bLEDPower04 AT %Q*: BOOL;

    // MR1K1 Y Encoder for PMPS Veto Device
    ///////////////////////////////////////
        {attribute 'TcLinkTo' := 'TIIB[PMPS_PRE]^IO Outputs^MR1K1_Y_ENC'}
        nMR1K1_Y_ENC_PMPS AT %Q* : UDINT;
        {attribute 'TcLinkTo' := 'TIIB[EL5042_M1K1_Yupdwn]^FB Inputs Channel 1^Status^Ready'}
        bMR1K1_Y_ENC_Ready AT %I* : BOOL;
        {attribute 'TcLinkTo' := 'TIIB[EL5042_M1K1_Yupdwn]^FB Inputs Channel 1^Status^TxPDO State'}
        bMR1K1_Y_ENC_TxPDO AT %I* : BOOL;

    // M1K1 Flow Press Sensors
    {attribute 'TcLinkTo' := '.iRaw := TIIB[EL3054_M1K1_FWM_PRSM]^AI Standard Channel 1^Value'}
    fM1K1_Flow_1 : FB_AnalogInput;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:FWM:1
        field: EGU lpm
        io: i
    '}
    fM1K1_Flow_1_val : LREAL;
    {attribute 'TcLinkTo' := '.iRaw := TIIB[EL3054_M1K1_FWM_PRSM]^AI Standard Channel 2^Value'}
    fM1K1_Flow_2 : FB_AnalogInput;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:FWM:2
        field: EGU lpm
        io: i
    '}
    fM1K1_Flow_2_val : LREAL;
    {attribute 'TcLinkTo' := '.iRaw := TIIB[EL3054_M1K1_FWM_PRSM]^AI Standard Channel 3^Value'}
    fM1K1_Press_1 : FB_AnalogInput;
    {attribute 'pytmc' := '
        pv: MR1K1:BEND:PRSM:1
        field: EGU bar
        io: i
    '}
    fM1K1_Press_1_val : LREAL;

    {attribute 'pytmc' := 'pv: MR1K1:BEND:COATING'}
    fbCoatingStates: FB_PositionStatePMPS1D;
    {attribute 'pytmc' := '
      pv: MR1K1:BEND:COATING:STATE:SET
      io: io
    '}
    eStateSet: E_MR1K1_States;
    {attribute 'pytmc' := '
      pv: MR1K1:BEND:COATING:STATE:GET
      io: i
    '}
    eStateGet: E_MR1K1_States;
    fbYSetup: FB_StateSetupHelper;
    //fbXSetup: FB_StateSetupHelper;

    astCoatingStatesY: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    //astCoatingStatesX: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;

    {attribute 'pytmc' := '
      pv: MR1K1:BEND:MMS:YUP
      io: i
    '}
    {attribute 'TcLinkTo' := '.iRaw := TIIB[EL3202-0010-YUP-YDWN]^RTD Inputs Channel 1^Value'}
    fbYUPMotorTemp : FB_Tempsensor := (fResolution:=0.01);

    {attribute 'pytmc' := '
      pv: MR1K1:BEND:MMS:YDWN
      io: i
    '}
    {attribute 'TcLinkTo' := '.iRaw := TIIB[EL3202-0010-YUP-YDWN]^RTD Inputs Channel 2^Value'}
    fbYDWNMotorTemp : FB_Tempsensor := (fResolution:=0.01);

    {attribute 'pytmc' := '
      pv: MR1K1:BEND:MMS:XUP
      io: i
    '}
    {attribute 'TcLinkTo' := '.iRaw := TIIB[EL3202-0010-XUP-XDWN]^RTD Inputs Channel 1^Value'}
    fbXUPMotorTemp : FB_Tempsensor := (fResolution:=0.01);

    {attribute 'pytmc' := '
      pv: MR1K1:BEND:MMS:XDWN
      io: i
    '}
    {attribute 'TcLinkTo' := '.iRaw := TIIB[EL3202-0010-XUP-XDWN]^RTD Inputs Channel 2^Value'}
    fbXDWNMotorTemp : FB_Tempsensor := (fResolution:=0.01);

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// M1K1
M1K1.fbRunHOMS(stYup:=M12,
               stYdwn:=M13,
               stXup:=M14,
               stXdwn:=M15,
               stPitch:=M16,
               nYupEncRef:=GVL_M1K1_Constants.nYUP_ENC_REF,
               nYdwnEncRef:=GVL_M1K1_Constants.nYDWN_ENC_REF,
               nXupEncRef:=GVL_M1K1_Constants.nXUP_ENC_REF,
               nXdwnEncRef:=GVL_M1K1_Constants.nXDWN_ENC_REF,
               bExecuteCoupleY:=M1K1.bExecuteCoupleY,
               bExecuteCoupleX:=M1K1.bExecuteCoupleX,
               bExecuteDecoupleY:=M1K1.bExecuteDecoupleY,
               bExecuteDecoupleX:=M1K1.bExecuteDecoupleX,
               bGantryAlreadyCoupledY=>M1K1.bGantryAlreadyCoupledY,
               bGantryAlreadyCoupledX=>M1K1.bGantryAlreadyCoupledX,
               nCurrGantryY=>M1K1.nCurrGantryY,
               nCurrGantryX=>M1K1.nCurrGantryX);

// No slave motion through Epics
M13.bExecute := FALSE; // M1K1-Ydwn
M15.bExecute := FALSE; // M1K1-Xdwn

// Convert nCurrGantry to um (smaller number) to read out in epics
M1K1.fCurrGantryY_um := LINT_TO_REAL(M1K1.nCurrGantryY) / 1000.0;
M1K1.fCurrGantryX_um := LINT_TO_REAL(M1K1.nCurrGantryX) / 1000.0;

// FB_MotionStage's for non-piezo axes
fbMotionStage_m12(stMotionStage:=M12);
fbMotionStage_m13(stMotionStage:=M13);
fbMotionStage_m14(stMotionStage:=M14);
fbMotionStage_m15(stMotionStage:=M15);

// Calculate Pitch RMS Error:
fbYRMSErrorM1K1(stMotionStage:=M12,
                fMaxRMSError=>fMaxYRMSErrorM1K1,
                fMinRMSError=>fMinYRMSErrorM1K1);

fbXRMSErrorM1K1(stMotionStage:=M14,
                fMaxRMSError=>fMaxXRMSErrorM1K1,
                fMinRMSError=>fMinXRMSErrorM1K1);

(*
// Pitch Control
fbM1K1PitchControl(Pitch:=GVL_M1K1.M1K1_Pitch,
                   Stepper:=M16,
                   lrCurrentSetpoint:=M16.fPosition,
                   q_bDone=>bM1K1PitchDone,
                   q_bBusy=>bM1K1PitchBusy);
// When STO hit, need to reset SP
IF NOT M16.bHardwareEnable THEN
    M16.fPosition := M16.stAxisStatus.fActPosition;
END_IF
*)
// 3-15-20: Having issues with pitch control on new Axilon systems, should test here
fbMotionStage_m16(stMotionStage:=M16);

// Raw Encoder Counts For Epics
nEncCntYupM1K1 := ULINT_TO_UDINT(M1K1.fbRunHOMS.stYupEnc.Count);
nEncCntYdwnM1K1 := ULINT_TO_UDINT(M1K1.fbRunHOMS.stYdwnEnc.Count);
nEncCntXupM1K1 := ULINT_TO_UDINT(M1K1.fbRunHOMS.stXupEnc.Count);
nEncCntXdwnM1K1 := ULINT_TO_UDINT(M1K1.fbRunHOMS.stXdwnEnc.Count);
nEncCntPitchM1K1 := LINT_TO_UDINT(GVL_M1K1.M1K1_Pitch.diEncCnt);

// Encoder Reference Values For Epics
nEncRefYupM1K1 := ULINT_TO_UDINT(GVL_M1K1_Constants.nYUP_ENC_REF);
nEncRefYdwnM1K1 := ULINT_TO_UDINT(GVL_M1K1_Constants.nYDWN_ENC_REF);
nEncRefXupM1K1 := ULINT_TO_UDINT(GVL_M1K1_Constants.nXUP_ENC_REF);
nEncRefXdwnM1K1 := ULINT_TO_UDINT(GVL_M1K1_Constants.nXDWN_ENC_REF);
mcReadParameterPitchM1K1(Axis:=M16.Axis,
                         Enable:=TRUE,
                         ParameterNumber:=MC_AxisParameter.AxisEncoderOffset,
                         ReadMode:=READMODE_CYCLIC,
                         Value=>fEncRefPitchM1K1_urad);

nEncRefPitchM1K1 := LREAL_TO_UDINT(ABS(fEncRefPitchM1K1_urad) * fEncLeverArm_mm);

// Export the Y encoder value for PMPS veto device evaluation
    IF bMR1K1_Y_ENC_Ready AND NOT bMR1K1_Y_ENC_TxPDO THEN
        nMR1K1_Y_ENC_PMPS := nEncCntYupM1K1;
    ELSE
        nMR1K1_Y_ENC_PMPS := 0;
    END_IF

    // LAMP KB Flow Pressure Sensors
    fM1K1_Flow_1(iTermBits:=15, fTermMax:=5.0427, fTermMin:=0.050472);
    fM1K1_Flow_1_val := fM1K1_Flow_1.fReal;

    fM1K1_Flow_2(iTermBits:=15, fTermMax:=5.0427, fTermMin:=0.050472);
    fM1K1_Flow_2_val := fM1K1_Flow_2.fReal;

    fM1K1_Press_1(iTermBits:=15, fTermMax:=4.0, fTermMin:=0);
    fM1K1_Press_1_val := fM1K1_Press_1.fReal;

fbYSetup(stPositionState:=GVL_States.stDefaultOffsetY, bSetDefault:=TRUE);
//fbXSetup(stPositionState:=GVL_States.stDefaultOffsetX, bSetDefault:=TRUE);

fbYSetup(stPositionState:=astCoatingStatesY[E_MR1K1_States.B4C],
    sName:='B4C',
    sPmpsState:='MR1K1:BEND-B4C',
    nEncoderCount:=31911452
);
(*fbXSetup(stPositionState:=astCoatingStatesX[E_MR1K1_States.B4C],
    sName:='B4C',
    sPmpsState:='MR1K1:BEND-B4C',
    nEncoderCount:=19829647
);*)
fbYSetup(stPositionState:=astCoatingStatesY[E_MR1K1_States.OUT],
    sName:='OUT',
    sPmpsState:='MR1K1:BEND-OUT',
    nEncoderCount:=13412630,
    fDelta:=50
);
(*
// Out position determined solely by Y Axis
fbXSetup(stPositionState:=astCoatingStatesX[E_MR1K1_States.OUT],
    sName:='OUT',
    sPmpsState:='MR1K1:BEND-OUT',
    nEncoderCount:=ULINT_TO_UDINT(M14.nRawEncoderULINT)
);
*)
fbCoatingStates(
    stMotionStage:=Main.M12,
    astPositionState:=astCoatingStatesY,
    eEnumSet:=eStateSet,
    eEnumGet:=eStateGet,
    fbFFHWO:=GVL_PMPS.fbFastFaultOutput1,
    fbArbiter:=GVL_PMPS.fbArbiter1,
    bEnableMotion:=TRUE,
    bEnableBeamParams:=TRUE,
    sDeviceName:='MR1K1:BEND',
    sTransitionKey:='MR1K1:BEND-TRANSITION',
);
fbYUPMotorTemp();
fbYDWNMotorTemp();
fbXUPMotorTemp();
fbXDWNMotorTemp();
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>