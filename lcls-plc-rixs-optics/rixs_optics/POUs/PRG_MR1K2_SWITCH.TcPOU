<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_MR1K2_SWITCH" Id="{5d1ad344-c9c3-47ff-86fa-37de6eb5129e}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_MR1K2_SWITCH
VAR
    {attribute 'TcLinkTo' := '.fbRunHOMS.bSTOEnable1:=TIIB[EL1004_M1K2_STO]^Channel 1^Input;
                              .fbRunHOMS.bSTOEnable2:=TIIB[EL1004_M1K2_STO]^Channel 2^Input;
                              .fbRunHOMS.stYupEnc.Count:=TIIB[EL5042_M1K2_Yleftright]^FB Inputs Channel 1^Position;
                              .fbRunHOMS.stYdwnEnc.Count:=TIIB[EL5042_M1K2_Yleftright]^FB Inputs Channel 2^Position;
                              .fbRunHOMS.stXupEnc.Count:=TIIB[EL5042_M1K2_Xupdwn]^FB Inputs Channel 1^Position;
                              .fbRunHOMS.stXdwnEnc.Count:=TIIB[EL5042_M1K2_Xupdwn]^FB Inputs Channel 2^Position;
                              .fSupplySecondY:=TIIB[EL7047_M1K2_Yright]^STM Synchron info data^Info data 1;
                              .fMotorCurSecondY:=TIIB[EL7047_M1K2_Yright]^STM Synchron info data^Info data 2;
                              .fSupplySecondX:=TIIB[EL7047_M1K2_Xdwn]^STM Synchron info data^Info data 1;
                              .fMotorCurSecondX:=TIIB[EL7047_M1K2_Xdwn]^STM Synchron info data^Info data 2
'}
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH
    '}
    M1K2 : DUT_HOMS;

    // Encoder Arrays/RMS Watch:
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:Y
    '}
    fbYRMSErrorM1K2 : FB_RMSWatch;
    fMaxYRMSErrorM1K2 : LREAL;
    fMinYRMSErrorM1K2 : LREAL;

    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:X
    '}
    fbXRMSErrorM1K2 : FB_RMSWatch;
    fMaxXRMSErrorM1K2 : LREAL;
    fMinXRMSErrorM1K2 : LREAL;

    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:PITCH
    '}
    fbPitchRMSErrorM1K2 : FB_RMSWatch;
    fMaxPitchRMSErrorM1K2 : LREAL;
    fMinPitchRMSErrorM1K2 : LREAL;

    // Pitch Control
    fbM1K2PitchControl : FB_PitchControl;
    bM1K2PitchDone : BOOL;
    bM1K2PitchBusy : BOOL;

    // 3-15-20 Having issues with pitch control on new Axilon systems
    // Using stepper only for now
    fbMotionStage_m5 : FB_MotionStage;

    // Roll (Rotation about Z axis) induced from Ygantry:
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:ROLL
        field: EGU urad
        io: i
    '}
    fYRoll_urad : LREAL; // Roll about Z axis in urad

    // Raw Encoder Counts
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:YLEFT:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntYleftM1K2 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:YRIGHT:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntYrightM1K2 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:XUP:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntXupM1K2 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:XDWN:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntXdwnM1K2 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:PITCH:CNT
        field: EGU cnt
        io: i
    '}
    nEncCntPitchM1K2 : UDINT;

    // Encoder Reference Values
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:YLEFT:REF
        field: EGU cnt
        io: i
    '}
    nEncRefYleftM1K2 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:YRIGHT:REF
        field: EGU cnt
        io: i
    '}
    nEncRefYrightM1K2 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:XUP:REF
        field: EGU cnt
        io: i
    '}
    nEncRefXupM1K2 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:XDWN:REF
        field: EGU cnt
        io: i
    '}
    nEncRefXdwnM1K2 : UDINT;
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:ENC:PITCH:REF
        field: EGU cnt
        io: i
    '}
    nEncRefPitchM1K2 : UDINT;
    mcReadParameterPitchM1K2 : MC_ReadParameter;
    fEncRefPitchM1K2_urad : LREAL; // Current Pitch encoder offset in urad

    // Common
    fEncLeverArm_mm : LREAL := 391.0;

// MR1K2 Flow Press Sensors
    {attribute 'TcLinkTo' := '.iRaw := TIIB[EL3054_M1K2_FWM_PRSM]^AI Standard Channel 1^Value'}
    fM1K2_Flow_1 : FB_AnalogInput;
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:FWM:1
        field: EGU lpm
        io: i
    '}
    fM1K2_Flow_1_val : LREAL;
    {attribute 'TcLinkTo' := '.iRaw := TIIB[EL3054_M1K2_FWM_PRSM]^AI Standard Channel 2^Value'}
    fM1K2_Flow_2 : FB_AnalogInput;
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:FWM:2
        field: EGU lpm
        io: i
    '}
    fM1K2_Flow_2_val : LREAL;
    {attribute 'TcLinkTo' := '.iRaw := TIIB[EL3054_M1K2_FWM_PRSM]^AI Standard Channel 3^Value'}
    fM1K2_Press_1 : FB_AnalogInput;
    {attribute 'pytmc' := '
        pv: MR1K2:SWITCH:PRSM:1
        field: EGU bar
        io: i
    '}
    fM1K2_Press_1_val : LREAL;

    {attribute 'pytmc' := 'pv: MR1K2:SWITCH:COATING'}
    fbCoatingStates: FB_PositionStatePMPS1D;
    {attribute 'pytmc' := '
      pv: MR1K2:SWITCH:COATING:STATE:SET
      io: io
    '}
    eStateSet: E_B4C_Rh_CoatingStates;
    {attribute 'pytmc' := '
      pv: MR1K2:SWITCH:COATING:STATE:GET
      io: i
    '}
    eStateGet: E_B4C_Rh_CoatingStates;
    fbYSetup: FB_StateSetupHelper;

    astCoatingStatesY: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// M1K2
M1K2.fbRunHOMS(stYup:=M1,
               stYdwn:=M2,
               stXup:=M3,
               stXdwn:=M4,
               stPitch:=M5,
               nYupEncRef:=GVL_M1K2_Constants.nYLEFT_ENC_REF,
               nYdwnEncRef:=GVL_M1K2_Constants.nYRIGHT_ENC_REF,
               nXupEncRef:=GVL_M1K2_Constants.nXUP_ENC_REF,
               nXdwnEncRef:=GVL_M1K2_Constants.nXDWN_ENC_REF,
               bExecuteCoupleY:=M1K2.bExecuteCoupleY,
               bExecuteCoupleX:=M1K2.bExecuteCoupleX,
               bExecuteDecoupleY:=M1K2.bExecuteDecoupleY,
               bExecuteDecoupleX:=M1K2.bExecuteDecoupleX,
               bGantryAlreadyCoupledY=>M1K2.bGantryAlreadyCoupledY,
               bGantryAlreadyCoupledX=>M1K2.bGantryAlreadyCoupledX,
               nCurrGantryY=>M1K2.nCurrGantryY,
               nCurrGantryX=>M1K2.nCurrGantryX);

// No slave motion through Epics
M2.bExecute := FALSE; // M1K2-Yright
M4.bExecute := FALSE; // M1K2-Xdwn

//Forcing limit switches for M1K2 pitch as the limit switches are no longer installed per ME they aren't able to install them precisely
M5.bLimitBackwardEnable := TRUE;
M5.bLimitForwardEnable := TRUE;

// Convert nCurrGantry to um (smaller number) to read out in epics
M1K2.fCurrGantryY_um := LINT_TO_REAL(M1K2.nCurrGantryY) / 1000.0;
M1K2.fCurrGantryX_um := LINT_TO_REAL(M1K2.nCurrGantryX) / 1000.0;

fYRoll_urad := (REAL_TO_LREAL(ATAN(M1K2.fCurrGantryY_um / GVL_M1K2_Constants.fRollLeverArm_um))) * EXPT(10, 6);

// FB_MotionStage's for non-piezo axes
fbMotionStage_m1(stMotionStage:=M1);
fbMotionStage_m2(stMotionStage:=M2);
fbMotionStage_m3(stMotionStage:=M3);
fbMotionStage_m4(stMotionStage:=M4);

// Calculate Pitch RMS Error:
fbYRMSErrorM1K2(stMotionStage:=M1,
                fMaxRMSError=>fMaxYRMSErrorM1K2,
                fMinRMSError=>fMinYRMSErrorM1K2);

fbXRMSErrorM1K2(stMotionStage:=M3,
                fMaxRMSError=>fMaxXRMSErrorM1K2,
                fMinRMSError=>fMinXRMSErrorM1K2);

fbPitchRMSErrorM1K2(stMotionStage:=M5,
                    fMaxRMSError=>fMaxPitchRMSErrorM1K2,
                    fMinRMSError=>fMinPitchRMSErrorM1K2);

(*
// Pitch Control
fbM1K2PitchControl(Pitch:=GVL_M1K2.M1K2_Pitch,
                   Stepper:=M5,
                   lrCurrentSetpoint:=M5.fPosition,
                   q_bDone=>bM1K2PitchDone,
                   q_bBusy=>bM1K2PitchBusy);
// When STO hit, need to reset SP
IF NOT M5.bHardwareEnable THEN
    M5.fPosition := M5.stAxisStatus.fActPosition;
END_IF
*)
// 3-15-20: Having issues with pitch control on new Axilon systems
fbMotionStage_m5(stMotionStage:=M5);

// Raw Encoder Counts For Epics
nEncCntYleftM1K2 := ULINT_TO_UDINT(M1K2.fbRunHOMS.stYupEnc.Count);
nEncCntYrightM1K2 := ULINT_TO_UDINT(M1K2.fbRunHOMS.stYdwnEnc.Count);
nEncCntXupM1K2 := ULINT_TO_UDINT(M1K2.fbRunHOMS.stXupEnc.Count);
nEncCntXdwnM1K2 := ULINT_TO_UDINT(M1K2.fbRunHOMS.stXdwnEnc.Count);
nEncCntPitchM1K2 := LINT_TO_UDINT(GVL_M1K2.M1K2_Pitch.diEncCnt);

// Encoder Reference Values For Epics
nEncRefYleftM1K2 := ULINT_TO_UDINT(GVL_M1K2_Constants.nYLEFT_ENC_REF);
nEncRefYrightM1K2 := ULINT_TO_UDINT(GVL_M1K2_Constants.nYRIGHT_ENC_REF);
nEncRefXupM1K2 := ULINT_TO_UDINT(GVL_M1K2_Constants.nXUP_ENC_REF);
nEncRefXdwnM1K2 := ULINT_TO_UDINT(GVL_M1K2_Constants.nXDWN_ENC_REF);
mcReadParameterPitchM1K2(Axis:=M5.Axis,
                         Enable:=TRUE,
                         ParameterNumber:=MC_AxisParameter.AxisEncoderOffset,
                         ReadMode:=READMODE_CYCLIC,
                         Value=>fEncRefPitchM1K2_urad);

nEncRefPitchM1K2 := LREAL_TO_UDINT(ABS(fEncRefPitchM1K2_urad) * fEncLeverArm_mm);

//FLOW AND PRESSURE SENSOR
// MR1K2 Flow Pressure Sensors
fM1K2_Flow_1(iTermBits:=15, fTermMax:=5.0427, fTermMin:=0.050472);
fM1K2_Flow_1_val := fM1K2_Flow_1.fReal;
fM1K2_Flow_2(iTermBits:=15, fTermMax:=5.0427, fTermMin:=0.050472);
fM1K2_Flow_2_val := fM1K2_Flow_2.fReal;
fM1K2_Press_1(iTermBits:=15, fTermMax:=4.0, fTermMin:=0);
fM1K2_Press_1_val := fM1K2_Press_1.fReal;

fbYSetup(stPositionState:=GVL_States.stDefaultOffsetY, bSetDefault:=TRUE);

fbYSetup(stPositionState:=astCoatingStatesY[E_B4C_Rh_CoatingStates.B4C],
    sName:='B4C',
    sPmpsState:='MR1K2:SWITCH-B4C',
    nEncoderCount:=91672358,
    fDelta:=5000
);
fbYSetup(stPositionState:=astCoatingStatesY[E_B4C_Rh_CoatingStates.Rh],
    sName:='Rh',
    sPmpsState:='MR1K2:SWITCH-RHODIUM',
    nEncoderCount:=106672361,
    fDelta:=5000
);
fbCoatingStates(
    stMotionStage:=Main.M1,
    astPositionState:=astCoatingStatesY,
    eEnumSet:=eStateSet,
    eEnumGet:=eStateGet,
    fbFFHWO:=GVL_PMPS.fbFastFaultOutput1,
    fbArbiter:=GVL_PMPS.fbArbiter1,
    bEnableMotion:=TRUE,
    bEnableBeamParams:=TRUE,
    sDeviceName:='MR1K2:SWITCH',
    sTransitionKey:='MR1K2:SWITCH-TRANSITION',
);

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>